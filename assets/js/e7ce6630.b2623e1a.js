"use strict";(self.webpackChunk_dev_lambda_job_orders_doc=self.webpackChunk_dev_lambda_job_orders_doc||[]).push([[668],{876:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>m});var o=t(2784);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=o.createContext({}),c=function(e){var r=o.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},u=function(e){var r=c(e.components);return o.createElement(s.Provider,{value:r},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},b=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),b=n,m=d["".concat(s,".").concat(b)]||d[b]||p[b]||a;return t?o.createElement(m,i(i({ref:r},u),{},{components:t})):o.createElement(m,i({ref:r},u))}));function m(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var a=t.length,i=new Array(a);i[0]=b;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},4477:(e,r,t)=>{t.r(r),t.d(r,{contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(7896),n=(t(2784),t(876));const a={},i="job orders",l={type:"mdx",permalink:"/job-orders/",source:"@site/src/pages/index.mdx",title:"job orders",description:"Asynchronous job queuing and execution tracking system.",frontMatter:{}},s=[{value:"Features",id:"features",level:2},{value:"Job orders dispatch and execution tracking",id:"job-orders-dispatch-and-execution-tracking",level:3},{value:"Integrity",id:"integrity",level:3},{value:"Execution control",id:"execution-control",level:3},{value:"Error recovery",id:"error-recovery",level:3},{value:"Observability",id:"observability",level:3},{value:"Security",id:"security",level:3},{value:"Integration",id:"integration",level:3},{value:"Scalability",id:"scalability",level:3}],c={toc:s},u="wrapper";function d(e){let{components:r,...t}=e;return(0,n.kt)(u,(0,o.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"job-orders"},"job orders"),(0,n.kt)("p",null,"Asynchronous job queuing and execution tracking system."),(0,n.kt)("h2",{id:"features"},"Features"),(0,n.kt)("h3",{id:"job-orders-dispatch-and-execution-tracking"},"Job orders dispatch and execution tracking"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Dispatch background jobs to dedicated microservices"),(0,n.kt)("li",{parentName:"ul"},"Job Submission: job orders allows clients to submit jobs for asynchronous processing."),(0,n.kt)("li",{parentName:"ul"},"Job Management: job orders provides an interface for monitoring the progress of jobs and retrieving the results when they are completed."),(0,n.kt)("li",{parentName:"ul"},"Job Prioritization: job orders allows for jobs to be prioritized based on their importance or urgency."),(0,n.kt)("li",{parentName:"ul"},"Track job execution status")),(0,n.kt)("h3",{id:"integrity"},"Integrity"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Ensure that each job order is processed at least once and successfully so at most once (unless cancelled or expired).")),(0,n.kt)("h3",{id:"execution-control"},"Execution control"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Schedule execution."),(0,n.kt)("li",{parentName:"ul"},"Cancel, reschedule job orders."),(0,n.kt)("li",{parentName:"ul"},"Set a validity expiration date."),(0,n.kt)("li",{parentName:"ul"},"Automatic Retry: job orders provides automatic retry functionality for failed jobs, with configurable retry policies and backoff strategies."),(0,n.kt)("li",{parentName:"ul"},"Dead Letter Queue: job orders can route failed jobs to a dead letter queue, allowing for manual inspection and debugging of failed jobs.")),(0,n.kt)("h3",{id:"error-recovery"},"Error recovery"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Recover from microservices errors, replay job orders"),(0,n.kt)("li",{parentName:"ul"},"Error Handling: job orders provides configurable error handling mechanisms to manage job failures and retries."),(0,n.kt)("li",{parentName:"ul"},"Graceful Degradation: job orders can gracefully degrade functionality when dependent microservices are unavailable, allowing other jobs to continue processing.")),(0,n.kt)("h3",{id:"observability"},"Observability"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Monitor background job activity"),(0,n.kt)("li",{parentName:"ul"},"Real-Time Monitoring: job orders provides real-time monitoring of job progress, allowing clients to view updates on job status as they occur."),(0,n.kt)("li",{parentName:"ul"},"Reporting: job orders provides reporting and analytics features, allowing clients to track job performance and identify areas for optimization."),(0,n.kt)("li",{parentName:"ul"},"Error Logging: job orders can log errors and exceptions for debugging purposes, providing insights into the root cause of job failures.")),(0,n.kt)("h3",{id:"security"},"Security"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Security: job orders provides authentication and authorization mechanisms to ensure that only authorized users can submit and monitor jobs."),(0,n.kt)("li",{parentName:"ul"},"Circuit Breaking: job orders can implement circuit breaking patterns to detect and handle failures in downstream microservices, preventing cascading failures.")),(0,n.kt)("h3",{id:"integration"},"Integration"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"job orders makes no assumption on the technology used to execute jobs, instead it provides a protocol for job execution tracking that can be easily integrated on your current codebase."),(0,n.kt)("li",{parentName:"ul"},"Customization: job orders is highly customizable, allowing for configuration of parameters such as timeout durations, retry limits, and worker node capacity.")),(0,n.kt)("h3",{id:"scalability"},"Scalability"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Scalability: job orders is designed to scale horizontally, allowing for multiple worker nodes to process jobs in parallel."),(0,n.kt)("li",{parentName:"ul"},"Load Balancing: job orders can implement load balancing techniques to distribute job processing across multiple worker nodes, improving fault tolerance and scalability."),(0,n.kt)("li",{parentName:"ul"},"Health Checks: job orders can implement health checks to monitor the availability and performance of worker nodes, ensuring that only healthy nodes are used for job processing.")))}d.isMDXComponent=!0}}]);